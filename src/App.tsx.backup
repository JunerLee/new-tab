import { useEffect, Suspense } from 'react'
import { motion } from 'framer-motion'
import { Settings } from 'lucide-react'
import './locales/i18n'
import { useAppStore } from './stores/useAppStore'
import { useTheme } from './hooks/useTheme'
import { useGlobalShortcuts } from './hooks/useKeyboard'
import { BackgroundImage } from './components/Background/BackgroundImage'
import { TimeWeather } from './components/TimeWeather'
import { SearchBar } from './components/SearchEngine/SearchBar'
import { QuickLaunchGrid } from './components/QuickLaunch/QuickLaunchGrid'
import { SettingsModal } from './components/Settings/SettingsModal'
import { ErrorBoundary } from './components/ErrorBoundary'
import { SuspenseFallback } from './components/LoadingSpinner'
import { cn } from './utils'
import { logError } from './utils/errorHandling'

function App() {
  const { setSettingsOpen } = useAppStore()
  
  // Initialize hooks
  useTheme()
  useGlobalShortcuts()

  // Initialize theme on component mount
  useEffect(() => {
    document.documentElement.classList.add('dark:bg-claude-dark')
  }, [])

  const handleSettingsClick = () => {
    setSettingsOpen(true)
  }

  const handleError = (error: Error, errorInfo: React.ErrorInfo) => {
    logError(error, 'App component error')
    console.error('App error:', { error, errorInfo })
  }

  return (
    <ErrorBoundary onError={handleError} showDetails={process.env.NODE_ENV === 'development'}>
      <div className="min-h-screen relative overflow-hidden">
        {/* 背景 */
        <ErrorBoundary>
          <Suspense fallback={<SuspenseFallback text="Loading background..." />}>
            <BackgroundImage />
          </Suspense>
        </ErrorBoundary>
        
        {/* Settings button */}
        <motion.button
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 1 }}
          onClick={handleSettingsClick}
          className={cn(
            "fixed top-6 right-6 z-10",
            "w-12 h-12 rounded-full",
            "glass-effect hover:bg-white/20 dark:hover:bg-black/20",
            "flex items-center justify-center",
            "transition-all duration-200",
            "text-claude-gray-600 dark:text-claude-gray-400",
            "hover:text-claude-gray-800 dark:hover:text-claude-gray-200"
          )}
        >
          <Settings className="w-5 h-5" />
        </motion.button>

        {/* 主要内容 */
        <div className="relative z-10 min-h-screen flex flex-col">
          {/* 头部区域 */
          <div className="flex-1 flex flex-col justify-center items-center px-6 py-12">
            <div className="w-full max-w-4xl mx-auto">
              {/* 时间和天气 */
              <ErrorBoundary>
                <Suspense fallback={<SuspenseFallback text="Loading time and weather..." />}>
                  <TimeWeather />
                </Suspense>
              </ErrorBoundary>
              
              {/* 搜索栏 */
              <div className="mb-16">
                <ErrorBoundary>
                  <Suspense fallback={<SuspenseFallback text="Loading search..." />}>
                    <SearchBar />
                  </Suspense>
                </ErrorBoundary>
              </div>
              
              {/* 快速启动 */
              <ErrorBoundary>
                <Suspense fallback={<SuspenseFallback text="Loading quick launch..." />}>
                  <QuickLaunchGrid />
                </Suspense>
              </ErrorBoundary>
            </div>
          </div>

          {/* 页脚 */
          <motion.footer
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.8 }}
            className="text-center py-6"
          >
            <div className="text-xs text-claude-gray-500 dark:text-claude-gray-400">
              Modern New Tab Extension
            </div>
          </motion.footer>
        </div>

        {/* 设置模态框 */
        <ErrorBoundary>
          <Suspense fallback={<SuspenseFallback text="Loading settings..." />}>
            <SettingsModal />
          </Suspense>
        </ErrorBoundary>
      </div>
    </ErrorBoundary>
  )
}

export default App