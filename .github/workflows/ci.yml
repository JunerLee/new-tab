name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Check code formatting
        run: npm run format:check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:run

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: extension-build-${{ github.sha }}
          path: dist/
          retention-days: 30

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run dependency check
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

  browser-compatibility:
    name: Browser Compatibility Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run build

      - name: Setup browser for testing
        uses: browser-actions/setup-chrome@latest
        if: matrix.browser == 'chrome'

      - name: Setup Firefox for testing
        uses: browser-actions/setup-firefox@latest
        if: matrix.browser == 'firefox'

      - name: Setup Edge for testing
        uses: browser-actions/setup-edge@latest
        if: matrix.browser == 'edge'

      # Add browser-specific extension validation here
      - name: Validate extension manifest
        run: |
          echo "Validating extension for ${{ matrix.browser }}"
          # Add browser-specific validation commands

  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: extension-build-${{ github.sha }}
          path: dist/

      - name: Analyze bundle size
        run: |
          echo "Analyzing bundle size..."
          du -sh dist/*
          
          # Check if bundle size is within limits
          BUNDLE_SIZE=$(du -sb dist | cut -f1)
          MAX_SIZE=5242880  # 5MB in bytes
          
          if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
            echo "Bundle size ($BUNDLE_SIZE bytes) exceeds maximum ($MAX_SIZE bytes)"
            exit 1
          fi
          
          echo "Bundle size OK: $BUNDLE_SIZE bytes"

  package-extension:
    name: Package Extension
    runs-on: ubuntu-latest
    needs: [build, browser-compatibility, performance-audit]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: extension-build-${{ github.sha }}
          path: dist/

      - name: Create extension package
        run: |
          cd dist
          zip -r ../new-tab-extension-${{ github.event.release.tag_name }}.zip .
          cd ..

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./new-tab-extension-${{ github.event.release.tag_name }}.zip
          asset_name: new-tab-extension-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip

  deploy-to-stores:
    name: Deploy to Extension Stores
    runs-on: ubuntu-latest
    needs: package-extension
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: extension-build-${{ github.sha }}
          path: dist/

      # Chrome Web Store deployment
      - name: Deploy to Chrome Web Store
        if: ${{ secrets.CHROME_EXTENSION_ID && secrets.CHROME_CLIENT_ID && secrets.CHROME_CLIENT_SECRET && secrets.CHROME_REFRESH_TOKEN }}
        run: |
          echo "Deploying to Chrome Web Store..."
          # Add Chrome Web Store deployment script here
          # You can use chrome-webstore-upload-cli or similar tools

      # Firefox Add-on deployment
      - name: Deploy to Firefox Add-ons
        if: ${{ secrets.FIREFOX_JWT_ISSUER && secrets.FIREFOX_JWT_SECRET }}
        run: |
          echo "Deploying to Firefox Add-ons..."
          # Add Firefox Add-ons deployment script here
          # You can use web-ext or addons-linter

      # Edge Add-ons deployment
      - name: Deploy to Edge Add-ons
        if: ${{ secrets.EDGE_PRODUCT_ID && secrets.EDGE_CLIENT_ID && secrets.EDGE_CLIENT_SECRET }}
        run: |
          echo "Deploying to Edge Add-ons..."
          # Add Edge Add-ons deployment script here

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, build, security-audit]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ success() }}
        run: |
          echo "✅ All checks passed! Build is ready for deployment."

      - name: Notify on failure
        if: ${{ failure() }}
        run: |
          echo "❌ Some checks failed. Please review the logs."
          # Add notification to Slack/Discord/email here if needed